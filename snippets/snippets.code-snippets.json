{
    "buyMarket - simple call": {
        "prefix": "buyMarketSimple",
        "body": [
            "gb.method.buyMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Simple market buy order"
    },
    "buyMarket - await": {
        "prefix": "buyMarketAwait",
        "body": [
            "await gb.method.buyMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Await market buy order"
    },
    "buyMarket - then with error handling": {
        "prefix": "buyMarketThen",
        "body": [
            "gb.method.buyMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Market Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Market Buy Error:', error);",
            "  });"
        ],
        "description": "Market buy order with .then and error handling"
    },
    "sellMarket - simple call": {
        "prefix": "sellMarketSimple",
        "body": [
            "gb.method.sellMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Simple market sell order"
    },
    "sellMarket - await": {
        "prefix": "sellMarketAwait",
        "body": [
            "await gb.method.sellMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Await market sell order"
    },
    "sellMarket - then with error handling": {
        "prefix": "sellMarketThen",
        "body": [
            "gb.method.sellMarket(${1:amount}, ${2:gb.data.pairName}, ${3:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Market Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Market Sell Error:', error);",
            "  });"
        ],
        "description": "Market sell order with .then and error handling"
    },
    "buyLimit - simple call": {
        "prefix": "buyLimitSimple",
        "body": [
            "gb.method.buyLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Simple limit buy order"
    },
    "buyLimit - await": {
        "prefix": "buyLimitAwait",
        "body": [
            "await gb.method.buyLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Await limit buy order"
    },
    "buyLimit - then with error handling": {
        "prefix": "buyLimitThen",
        "body": [
            "gb.method.buyLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Limit Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Limit Buy Error:', error);",
            "  });"
        ],
        "description": "Limit buy order with .then and error handling"
    },
    "sellLimit - simple call": {
        "prefix": "sellLimitSimple",
        "body": [
            "gb.method.sellLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Simple limit sell order"
    },
    "sellLimit - await": {
        "prefix": "sellLimitAwait",
        "body": [
            "await gb.method.sellLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Await limit sell order"
    },
    "sellLimit - then with error handling": {
        "prefix": "sellLimitThen",
        "body": [
            "gb.method.sellLimit(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Limit Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Limit Sell Error:', error);",
            "  });"
        ],
        "description": "Limit sell order with .then and error handling"
    },
    "buyLimitPostOnly - simple call": {
        "prefix": "buyLimitPostOnlySimple",
        "body": [
            "gb.method.buyLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Simple limit buy order (post-only)"
    },
    "buyLimitPostOnly - await": {
        "prefix": "buyLimitPostOnlyAwait",
        "body": [
            "await gb.method.buyLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Await limit buy order (post-only)"
    },
    "buyLimitPostOnly - then with error handling": {
        "prefix": "buyLimitPostOnlyThen",
        "body": [
            "gb.method.buyLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Limit Buy Post-Only Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Limit Buy Post-Only Error:', error);",
            "  });"
        ],
        "description": "Limit buy post-only order with .then and error handling"
    },
    "sellLimitPostOnly - simple call": {
        "prefix": "sellLimitPostOnlySimple",
        "body": [
            "gb.method.sellLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Simple limit sell order (post-only)"
    },
    "sellLimitPostOnly - await": {
        "prefix": "sellLimitPostOnlyAwait",
        "body": [
            "await gb.method.sellLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})"
        ],
        "description": "Await limit sell order (post-only)"
    },
    "sellLimitPostOnly - then with error handling": {
        "prefix": "sellLimitPostOnlyThen",
        "body": [
            "gb.method.sellLimitPostOnly(${1:amount}, ${2:price}, ${3:gb.data.pairName}, ${4:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Limit Sell Post-Only Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Limit Sell Post-Only Error:', error);",
            "  });"
        ],
        "description": "Limit sell post-only order with .then and error handling"
    },
    "closeMarket - simple call": {
        "prefix": "closeMarketSimple",
        "body": [
            "gb.method.closeMarket(${1:gb.data.pairName}, ${2:amount}, ${3:gb.data.exchangeName})"
        ],
        "description": "Simple market close order (futures)"
    },
    "closeMarket - await": {
        "prefix": "closeMarketAwait",
        "body": [
            "await gb.method.closeMarket(${1:gb.data.pairName}, ${2:amount}, ${3:gb.data.exchangeName})"
        ],
        "description": "Await market close order (futures)"
    },
    "closeMarket - then with error handling": {
        "prefix": "closeMarketThen",
        "body": [
            "gb.method.closeMarket(${1:gb.data.pairName}, ${2:amount}, ${3:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Market Close Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Market Close Error:', error);",
            "  });"
        ],
        "description": "Market close order with .then and error handling (futures)"
    },
    "closeLimit - simple call": {
        "prefix": "closeLimitSimple",
        "body": [
            "gb.method.closeLimit(${1:price}, ${2:gb.data.pairName}, ${3:amount}, ${4:gb.data.exchangeName})"
        ],
        "description": "Simple limit close order (futures)"
    },
    "closeLimit - await": {
        "prefix": "closeLimitAwait",
        "body": [
            "await gb.method.closeLimit(${1:price}, ${2:gb.data.pairName}, ${3:amount}, ${4:gb.data.exchangeName})"
        ],
        "description": "Await limit close order (futures)"
    },
    "closeLimit - then with error handling": {
        "prefix": "closeLimitThen",
        "body": [
            "gb.method.closeLimit(${1:price}, ${2:gb.data.pairName}, ${3:amount}, ${4:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Limit Close Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Limit Close Error:', error);",
            "  });"
        ],
        "description": "Limit close order with .then and error handling (futures)"
    },
    "cancelOrder - simple call": {
        "prefix": "cancelOrderSimple",
        "body": [
            "gb.method.cancelOrder('${1:orderId}', ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Simple order cancellation"
    },
    "cancelOrder - await": {
        "prefix": "cancelOrderAwait",
        "body": [
            "await gb.method.cancelOrder('${1:orderId}', ${2:gb.data.pairName}, ${3:gb.data.exchangeName})"
        ],
        "description": "Await order cancellation"
    },
    "cancelOrder - then with error handling": {
        "prefix": "cancelOrderThen",
        "body": [
            "gb.method.cancelOrder('${1:orderId}', ${2:gb.data.pairName}, ${3:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('Order Cancellation Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('Order Cancellation Error:', error);",
            "  });"
        ],
        "description": "Order cancellation with .then and error handling"
    },
    "STOP_LOSS_Buy - Binance Only - simple call": {
        "prefix": "STOP_LOSS_BuySimpleBinance",
        "body": [
            "gb.method.STOP_LOSS_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple STOP_LOSS_Buy (Binance Only)"
    },
    "STOP_LOSS_Buy - Binance Only - await": {
        "prefix": "STOP_LOSS_BuyAwaitBinance",
        "body": [
            "await gb.method.STOP_LOSS_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await STOP_LOSS_Buy (Binance Only)"
    },
    "STOP_LOSS_Buy - Binance Only - then with error handling": {
        "prefix": "STOP_LOSS_BuyThenBinance",
        "body": [
            "gb.method.STOP_LOSS_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('STOP_LOSS_Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('STOP_LOSS_Buy Error:', error);",
            "  });"
        ],
        "description": "STOP_LOSS_Buy with .then and error handling (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Buy - Binance Only - simple call": {
        "prefix": "STOP_LOSS_LIMIT_BuySimpleBinance",
        "body": [
            "gb.method.STOP_LOSS_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple STOP_LOSS_LIMIT_Buy (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Buy - Binance Only - await": {
        "prefix": "STOP_LOSS_LIMIT_BuyAwaitBinance",
        "body": [
            "await gb.method.STOP_LOSS_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await STOP_LOSS_LIMIT_Buy (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Buy - Binance Only - then with error handling": {
        "prefix": "STOP_LOSS_LIMIT_BuyThenBinance",
        "body": [
            "gb.method.STOP_LOSS_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('STOP_LOSS_LIMIT_Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('STOP_LOSS_LIMIT_Buy Error:', error);",
            "  });"
        ],
        "description": "STOP_LOSS_LIMIT_Buy with .then and error handling (Binance Only)"
    },
    "TAKE_PROFIT_Buy - Binance Only - simple call": {
        "prefix": "TAKE_PROFIT_BuySimpleBinance",
        "body": [
            "gb.method.TAKE_PROFIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple TAKE_PROFIT_Buy (Binance Only)"
    },
    "TAKE_PROFIT_Buy - Binance Only - await": {
        "prefix": "TAKE_PROFIT_BuyAwaitBinance",
        "body": [
            "await gb.method.TAKE_PROFIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await TAKE_PROFIT_Buy (Binance Only)"
    },
    "TAKE_PROFIT_Buy - Binance Only - then with error handling": {
        "prefix": "TAKE_PROFIT_BuyThenBinance",
        "body": [
            "gb.method.TAKE_PROFIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('TAKE_PROFIT_Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TAKE_PROFIT_Buy Error:', error);",
            "  });"
        ],
        "description": "TAKE_PROFIT_Buy with .then and error handling (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Buy - Binance Only - simple call": {
        "prefix": "TAKE_PROFIT_LIMIT_BuySimpleBinance",
        "body": [
            "gb.method.TAKE_PROFIT_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple TAKE_PROFIT_LIMIT_Buy (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Buy - Binance Only - await": {
        "prefix": "TAKE_PROFIT_LIMIT_BuyAwaitBinance",
        "body": [
            "await gb.method.TAKE_PROFIT_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await TAKE_PROFIT_LIMIT_Buy (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Buy - Binance Only - then with error handling": {
        "prefix": "TAKE_PROFIT_LIMIT_BuyThenBinance",
        "body": [
            "gb.method.TAKE_PROFIT_LIMIT_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('TAKE_PROFIT_LIMIT_Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TAKE_PROFIT_LIMIT_Buy Error:', error);",
            "  });"
        ],
        "description": "TAKE_PROFIT_LIMIT_Buy with .then and error handling (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Buy - Binance Only - simple call": {
        "prefix": "TRAILING_STOP_MARKET_BuySimpleBinance",
        "body": [
            "gb.method.TRAILING_STOP_MARKET_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})"
        ],
        "description": "Simple TRAILING_STOP_MARKET_Buy (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Buy - Binance Only - await": {
        "prefix": "TRAILING_STOP_MARKET_BuyAwaitBinance",
        "body": [
            "await gb.method.TRAILING_STOP_MARKET_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})"
        ],
        "description": "Await TRAILING_STOP_MARKET_Buy (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Buy - Binance Only - then with error handling": {
        "prefix": "TRAILING_STOP_MARKET_BuyThenBinance",
        "body": [
            "gb.method.TRAILING_STOP_MARKET_Buy(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})",
            "  .then(response => {",
            "    console.log('TRAILING_STOP_MARKET_Buy Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TRAILING_STOP_MARKET_Buy Error:', error);",
            "  });"
        ],
        "description": "TRAILING_STOP_MARKET_Buy with .then and error handling (Binance Only)"
    },
    "STOP_LOSS_Sell - Binance Only - simple call": {
        "prefix": "STOP_LOSS_SellSimpleBinance",
        "body": [
            "gb.method.STOP_LOSS_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple STOP_LOSS_Sell (Binance Only)"
    },
    "STOP_LOSS_Sell - Binance Only - await": {
        "prefix": "STOP_LOSS_SellAwaitBinance",
        "body": [
            "await gb.method.STOP_LOSS_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await STOP_LOSS_Sell (Binance Only)"
    },
    "STOP_LOSS_Sell - Binance Only - then with error handling": {
        "prefix": "STOP_LOSS_SellThenBinance",
        "body": [
            "gb.method.STOP_LOSS_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('STOP_LOSS_Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('STOP_LOSS_Sell Error:', error);",
            "  });"
        ],
        "description": "STOP_LOSS_Sell with .then and error handling (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Sell - Binance Only - simple call": {
        "prefix": "STOP_LOSS_LIMIT_SellSimpleBinance",
        "body": [
            "gb.method.STOP_LOSS_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple STOP_LOSS_LIMIT_Sell (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Sell - Binance Only - await": {
        "prefix": "STOP_LOSS_LIMIT_SellAwaitBinance",
        "body": [
            "await gb.method.STOP_LOSS_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await STOP_LOSS_LIMIT_Sell (Binance Only)"
    },
    "STOP_LOSS_LIMIT_Sell - Binance Only - then with error handling": {
        "prefix": "STOP_LOSS_LIMIT_SellThenBinance",
        "body": [
            "gb.method.STOP_LOSS_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('STOP_LOSS_LIMIT_Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('STOP_LOSS_LIMIT_Sell Error:', error);",
            "  });"
        ],
        "description": "STOP_LOSS_LIMIT_Sell with .then and error handling (Binance Only)"
    },
    "TAKE_PROFIT_Sell - Binance Only - simple call": {
        "prefix": "TAKE_PROFIT_SellSimpleBinance",
        "body": [
            "gb.method.TAKE_PROFIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple TAKE_PROFIT_Sell (Binance Only)"
    },
    "TAKE_PROFIT_Sell - Binance Only - await": {
        "prefix": "TAKE_PROFIT_SellAwaitBinance",
        "body": [
            "await gb.method.TAKE_PROFIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await TAKE_PROFIT_Sell (Binance Only)"
    },
    "TAKE_PROFIT_Sell - Binance Only - then with error handling": {
        "prefix": "TAKE_PROFIT_SellThenBinance",
        "body": [
            "gb.method.TAKE_PROFIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('TAKE_PROFIT_Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TAKE_PROFIT_Sell Error:', error);",
            "  });"
        ],
        "description": "TAKE_PROFIT_Sell with .then and error handling (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Sell - Binance Only - simple call": {
        "prefix": "TAKE_PROFIT_LIMIT_SellSimpleBinance",
        "body": [
            "gb.method.TAKE_PROFIT_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Simple TAKE_PROFIT_LIMIT_Sell (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Sell - Binance Only - await": {
        "prefix": "TAKE_PROFIT_LIMIT_SellAwaitBinance",
        "body": [
            "await gb.method.TAKE_PROFIT_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})"
        ],
        "description": "Await TAKE_PROFIT_LIMIT_Sell (Binance Only)"
    },
    "TAKE_PROFIT_LIMIT_Sell - Binance Only - then with error handling": {
        "prefix": "TAKE_PROFIT_LIMIT_SellThenBinance",
        "body": [
            "gb.method.TAKE_PROFIT_LIMIT_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('TAKE_PROFIT_LIMIT_Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TAKE_PROFIT_LIMIT_Sell Error:', error);",
            "  });"
        ],
        "description": "TAKE_PROFIT_LIMIT_Sell with .then and error handling (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Sell - Binance Only - simple call": {
        "prefix": "TRAILING_STOP_MARKET_SellSimpleBinance",
        "body": [
            "gb.method.TRAILING_STOP_MARKET_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})"
        ],
        "description": "Simple TRAILING_STOP_MARKET_Sell (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Sell - Binance Only - await": {
        "prefix": "TRAILING_STOP_MARKET_SellAwaitBinance",
        "body": [
            "await gb.method.TRAILING_STOP_MARKET_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})"
        ],
        "description": "Await TRAILING_STOP_MARKET_Sell (Binance Only)"
    },
    "TRAILING_STOP_MARKET_Sell - Binance Only - then with error handling": {
        "prefix": "TRAILING_STOP_MARKET_SellThenBinance",
        "body": [
            "gb.method.TRAILING_STOP_MARKET_Sell(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:callbackRate}, ${5:gb.data.exchangeName}, ${6:activationPrice})",
            "  .then(response => {",
            "    console.log('TRAILING_STOP_MARKET_Sell Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('TRAILING_STOP_MARKET_Sell Error:', error);",
            "  });"
        ],
        "description": "TRAILING_STOP_MARKET_Sell with .then and error handling (Binance Only)"
    },
    "createOCOBuyOrder - Binance Only - simple call": {
        "prefix": "createOCOBuyOrderSimpleBinance",
        "body": [
            "gb.method.createOCOBuyOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})"
        ],
        "description": "Simple createOCOBuyOrder (Binance Only)"
    },
    "createOCOBuyOrder - Binance Only - await": {
        "prefix": "createOCOBuyOrderAwaitBinance",
        "body": [
            "await gb.method.createOCOBuyOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})"
        ],
        "description": "Await createOCOBuyOrder (Binance Only)"
    },
    "createOCOBuyOrder - Binance Only - then with error handling": {
        "prefix": "createOCOBuyOrderThenBinance",
        "body": [
            "gb.method.createOCOBuyOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('OCO Buy Order Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('OCO Buy Order Error:', error);",
            "  });"
        ],
        "description": "OCO Buy Order with .then and error handling (Binance Only)"
    },
    "createOCOSellOrder - Binance Only - simple call": {
        "prefix": "createOCOSellOrderSimpleBinance",
        "body": [
            "gb.method.createOCOSellOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})"
        ],
        "description": "Simple createOCOSellOrder (Binance Only)"
    },
    "createOCOSellOrder - Binance Only - await": {
        "prefix": "createOCOSellOrderAwaitBinance",
        "body": [
            "await gb.method.createOCOSellOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})"
        ],
        "description": "Await createOCOSellOrder (Binance Only)"
    },
    "createOCOSellOrder - Binance Only - then with error handling": {
        "prefix": "createOCOSellOrderThenBinance",
        "body": [
            "gb.method.createOCOSellOrder(${1:gb.data.pairName}, ${2:volume}, ${3:price}, ${4:stopPrice}, ${5:tpPrice}, ${6:gb.data.exchangeName})",
            "  .then(response => {",
            "    console.log('OCO Sell Order Success:', response);",
            "  })",
            "  .catch(error => {",
            "    console.error('OCO Sell Order Error:', error);",
            "  });"
        ],
        "description": "OCO Sell Order with .then and error handling (Binance Only)"
    },
    "getLedger - Retrieve pair state for other active trading pairs": {
        "prefix": "getLedger",
        "body": [
            "const ledger = gb.method.getLedger(gb.data.pairName, gb.data.exchangeName);"
        ],
        "description": "Get the pair state data for other active trading pairs"
    },
    "setTimeScaleMark - Place a mark on chart with a custom message": {
        "prefix": "setTimeScaleMark",
        "body": [
            "gb.method.setTimeScaleMark(gb.data.pairName, gb.data.exchangeName, '${1:message}');"
        ],
        "description": "Display a custom message in a mark on the chart at a specific bar"
    },
    "getCandles - Await - Retrieve additional OHLCV data": {
        "prefix": "getCandlesAwait",
        "body": [
            "const candles = await gb.method.getCandles(${1:interval}, ${2:period}, gb.data.pairName, gb.data.exchangeName);"
        ],
        "description": "Await function to retrieve OHLCV data (be cautious of API rate limits)"
    },
    "getCandles - Then with Error Handling - Retrieve additional OHLCV data": {
        "prefix": "getCandlesThen",
        "body": [
            "gb.method.getCandles(${1:interval}, ${2:period}, gb.data.pairName, gb.data.exchangeName)",
            "  .then(candles => {",
            "    console.log('Candles data retrieved:', candles);",
            "  })",
            "  .catch(error => {",
            "    console.error('Error retrieving candles data:', error);",
            "  });"
        ],
        "description": "Retrieve OHLCV data with .then() and error handling (be cautious of API rate limits)"
    },
    "getTrend - Await - Retrieve trend data for actively cycling pairs": {
        "prefix": "getTrendAwait",
        "body": [
            "const trend = await gb.method.getTrend(gb.data.pairName, gb.data.exchangeName, '${1:version}');"
        ],
        "description": "Await function to retrieve trend data for actively cycling pairs"
    },
    "getTrend - Then with Error Handling - Retrieve trend data for actively cycling pairs": {
        "prefix": "getTrendThen",
        "body": [
            "gb.method.getTrend(gb.data.pairName, gb.data.exchangeName, '${1:version}')",
            "  .then(trend => {",
            "    console.log('Trend data retrieved:', trend);",
            "  })",
            "  .catch(error => {",
            "    console.error('Error retrieving trend data:', error);",
            "  });"
        ],
        "description": "Retrieve trend data with .then() and error handling"
    },
    "config - Gunbot config.js contents": {
        "prefix": "config",
        "body": [
            "const config = gb.data.config;"
        ],
        "description": "Retrieve the contents of Gunbot's config.js file"
    },
    "pairLedger - Complete pair ledger": {
        "prefix": "pairLedger",
        "body": [
            "const pairLedger = gb.data.pairLedger;"
        ],
        "description": "Access the complete pair ledger, can also store your own persistent variables"
    },
    "pairName - Current trading pair name": {
        "prefix": "pairName",
        "body": [
            "const pairName = gb.data.pairName;"
        ],
        "description": "Get the current trading pair name (e.g., USDT-BTC)"
    },
    "exchangeName - Current exchange name": {
        "prefix": "exchangeName",
        "body": [
            "const exchangeName = gb.data.exchangeName;"
        ],
        "description": "Get the name of the current exchange (e.g., binance)"
    },
    "balances - All balances on the exchange": {
        "prefix": "balances",
        "body": [
            "const balances = gb.data.balances;"
        ],
        "description": "Retrieve all account balances from the current exchange"
    },
    "quoteBalance - Current quote balance for the pair": {
        "prefix": "quoteBalance",
        "body": [
            "const quoteBalance = gb.data.quoteBalance;"
        ],
        "description": "Get the current quote balance (e.g., BTC balance on an USDT-BTC pair)"
    },
    "baseBalance - Current base balance for the pair": {
        "prefix": "baseBalance",
        "body": [
            "const baseBalance = gb.data.baseBalance;"
        ],
        "description": "Get the current base balance (e.g., USDT balance on an USDT-BTC pair)"
    },
    "onOrdersBalance - Value of open orders for the current pair": {
        "prefix": "onOrdersBalance",
        "body": [
            "const onOrdersBalance = gb.data.onOrdersBalance;"
        ],
        "description": "Retrieve the quote balance value of open orders for the current trading pair"
    },
    "openOrders - Open orders for the current pair": {
        "prefix": "openOrders",
        "body": [
            "const openOrders = gb.data.openOrders;"
        ],
        "description": "Get the list of open orders for the current trading pair"
    },
    "orders - History of filled orders for the current pair": {
        "prefix": "orders",
        "body": [
            "const orders = gb.data.orders;"
        ],
        "description": "Retrieve the history of filled orders for the current trading pair"
    },
    "orderbook - First 10 bid/ask entries from the orderbook": {
        "prefix": "orderbook",
        "body": [
            "const orderbook = gb.data.orderbook;"
        ],
        "description": "Retrieve the first 10 bid and ask entries in the orderbook, including price and volume"
    },
    "breakEven - Break even price for current holdings": {
        "prefix": "breakEven",
        "body": [
            "const breakEven = gb.data.breakEven;"
        ],
        "description": "Get the break-even price for current spot holdings, including trading fees"
    },
    "gotBag - Indicates if the pair has sufficient balance to sell": {
        "prefix": "gotBag",
        "body": [
            "const gotBag = gb.data.gotBag;"
        ],
        "description": "Check if the value of quote balance exceeds the minimum volume to sell for the current pair"
    },
    "leverage - Leverage for the current futures position": {
        "prefix": "leverage",
        "body": [
            "const leverage = gb.data.leverage;"
        ],
        "description": "Get the leverage level of the current futures position"
    },
    "walletBalance - Wallet balance in futures trading": {
        "prefix": "walletBalance",
        "body": [
            "const walletBalance = gb.data.walletBalance;"
        ],
        "description": "Retrieve the current wallet balance in the futures account"
    },
    "availableMargin - Available margin for futures trading": {
        "prefix": "availableMargin",
        "body": [
            "const availableMargin = gb.data.availableMargin;"
        ],
        "description": "Get the available margin balance in the futures account"
    },
    "maintenanceMargin - Maintenance margin for futures account": {
        "prefix": "maintenanceMargin",
        "body": [
            "const maintenanceMargin = gb.data.maintenanceMargin;"
        ],
        "description": "Retrieve the maintenance margin requirement for the futures account"
    },
    "maxNotionalValue - Max notional value for current futures position": {
        "prefix": "maxNotionalValue",
        "body": [
            "const maxNotionalValue = gb.data.maxNotionalValue;"
        ],
        "description": "Get the maximum notional value allowed for the current futures position at the set leverage"
    },
    "totalPositionInitialMargin - Initial margin for all futures positions": {
        "prefix": "totalPositionInitialMargin",
        "body": [
            "const totalPositionInitialMargin = gb.data.totalPositionInitialMargin;"
        ],
        "description": "Get the total initial margin required for all current futures positions"
    },
    "totalOpenOrderInitialMargin - Initial margin for open futures orders": {
        "prefix": "totalOpenOrderInitialMargin",
        "body": [
            "const totalOpenOrderInitialMargin = gb.data.totalOpenOrderInitialMargin;"
        ],
        "description": "Retrieve the total initial margin required for open futures orders"
    },
    "currentQty - Current futures position size": {
        "prefix": "currentQty",
        "body": [
            "const currentQty = gb.data.currentQty;"
        ],
        "description": "Get the size of the current futures position"
    },
    "currentSide - Current futures position side": {
        "prefix": "currentSide",
        "body": [
            "const currentSide = gb.data.currentSide;"
        ],
        "description": "Indicates the current futures position side (e.g., long, short, or none)"
    },
    "liquidationPrice - Futures liquidation price": {
        "prefix": "liquidationPrice",
        "body": [
            "const liquidationPrice = gb.data.liquidationPrice;"
        ],
        "description": "Get the liquidation price for the current futures position"
    },
    "period - Current candle size (PERIOD setting)": {
        "prefix": "period",
        "body": [
            "const period = gb.data.period;"
        ],
        "description": "Retrieve the current candle size as set in the Gunbot strategy PERIOD setting"
    },
    "bid - Highest bid price": {
        "prefix": "bid",
        "body": [
            "const bid = gb.data.bid;"
        ],
        "description": "Get the highest bid price for the current pair"
    },
    "ask - Lowest ask price": {
        "prefix": "ask",
        "body": [
            "const ask = gb.data.ask;"
        ],
        "description": "Get the lowest ask price for the current pair"
    },
    "ema1 - Latest EMA1 value": {
        "prefix": "ema1",
        "body": [
            "const ema1 = gb.data.ema1;"
        ],
        "description": "Retrieve the latest value of the EMA1 indicator"
    },
    "ema2 - Latest EMA2 value": {
        "prefix": "ema2",
        "body": [
            "const ema2 = gb.data.ema2;"
        ],
        "description": "Retrieve the latest value of the EMA2 indicator"
    },
    "ema3 - Latest EMA3 value": {
        "prefix": "ema3",
        "body": [
            "const ema3 = gb.data.ema3;"
        ],
        "description": "Retrieve the latest value of the EMA3 indicator"
    },
    "BTCUSDprice - Latest BTC/USD price": {
        "prefix": "BTCUSDprice",
        "body": [
            "const BTCUSDprice = gb.data.BTCUSDprice;"
        ],
        "description": "Retrieve the latest BTC/USD price from the same exchange (or equivalent spot pair)"
    },
    "mfi - Latest MFI value": {
        "prefix": "mfi",
        "body": [
            "const mfi = gb.data.mfi;"
        ],
        "description": "Retrieve the latest value of the MFI (Money Flow Index) indicator"
    },
    "rsi - Latest RSI value": {
        "prefix": "rsi",
        "body": [
            "const rsi = gb.data.rsi;"
        ],
        "description": "Retrieve the latest value of the RSI (Relative Strength Index) indicator"
    },
    "lowBB - Latest low Bollinger Band value": {
        "prefix": "lowBB",
        "body": [
            "const lowBB = gb.data.lowBB;"
        ],
        "description": "Retrieve the latest value of the low Bollinger Band"
    },
    "highBB - Latest high Bollinger Band value": {
        "prefix": "highBB",
        "body": [
            "const highBB = gb.data.highBB;"
        ],
        "description": "Retrieve the latest value of the high Bollinger Band"
    },
    "tenkan - Latest Tenkan value": {
        "prefix": "tenkan",
        "body": [
            "const tenkan = gb.data.tenkan;"
        ],
        "description": "Retrieve the latest value of the Tenkan (Ichimoku) indicator"
    },
    "chikou - Latest Chikou value": {
        "prefix": "chikou",
        "body": [
            "const chikou = gb.data.chikou;"
        ],
        "description": "Retrieve the latest value of the Chikou (Ichimoku) indicator"
    },
    "kijun - Latest Kijun value": {
        "prefix": "kijun",
        "body": [
            "const kijun = gb.data.kijun;"
        ],
        "description": "Retrieve the latest value of the Kijun (Ichimoku) indicator"
    },
    "senkouSpanA - Latest Senkou Span A value": {
        "prefix": "senkouSpanA",
        "body": [
            "const senkouSpanA = gb.data.senkouSpanA;"
        ],
        "description": "Retrieve the latest value of the Senkou Span A (Ichimoku) indicator"
    },
    "senkouSpanB - Latest Senkou Span B value": {
        "prefix": "senkouSpanB",
        "body": [
            "const senkouSpanB = gb.data.senkouSpanB;"
        ],
        "description": "Retrieve the latest value of the Senkou Span B (Ichimoku) indicator"
    },
    "fastSma - Latest fast SMA value": {
        "prefix": "fastSma",
        "body": [
            "const fastSma = gb.data.fastSma;"
        ],
        "description": "Retrieve the latest value of the fast Simple Moving Average"
    },
    "slowSma - Latest slow SMA value": {
        "prefix": "slowSma",
        "body": [
            "const slowSma = gb.data.slowSma;"
        ],
        "description": "Retrieve the latest value of the slow Simple Moving Average"
    },
    "R1 - Latest R1 resistance level": {
        "prefix": "R1",
        "body": [
            "const R1 = gb.data.R1;"
        ],
        "description": "Retrieve the latest value of the R1 resistance level (Pivot Point)"
    },
    "S1 - Latest S1 support level": {
        "prefix": "S1",
        "body": [
            "const S1 = gb.data.S1;"
        ],
        "description": "Retrieve the latest value of the S1 support level (Pivot Point)"
    },
    "R2 - Latest R2 resistance level": {
        "prefix": "R2",
        "body": [
            "const R2 = gb.data.R2;"
        ],
        "description": "Retrieve the latest value of the R2 resistance level (Pivot Point)"
    },
    "S2 - Latest S2 support level": {
        "prefix": "S2",
        "body": [
            "const S2 = gb.data.S2;"
        ],
        "description": "Retrieve the latest value of the S2 support level (Pivot Point)"
    },
    "macd - Latest MACD value": {
        "prefix": "macd",
        "body": [
            "const macd = gb.data.macd;"
        ],
        "description": "Retrieve the latest value of the MACD (Moving Average Convergence Divergence) indicator"
    },
    "macdSignal - Latest MACD signal line value": {
        "prefix": "macdSignal",
        "body": [
            "const macdSignal = gb.data.macdSignal;"
        ],
        "description": "Retrieve the latest value of the MACD signal line"
    },
    "macdHistogram - Latest MACD histogram value": {
        "prefix": "macdHistogram",
        "body": [
            "const macdHistogram = gb.data.macdHistogram;"
        ],
        "description": "Retrieve the latest value of the MACD histogram"
    },
    "stochK - Latest Stochastic K value": {
        "prefix": "stochK",
        "body": [
            "const stochK = gb.data.stochK;"
        ],
        "description": "Retrieve the latest value of the Stochastic K indicator"
    },
    "stochD - Latest Stochastic D value": {
        "prefix": "stochD",
        "body": [
            "const stochD = gb.data.stochD;"
        ],
        "description": "Retrieve the latest value of the Stochastic D indicator"
    },
    "stochRsi - Latest Stochastic RSI value": {
        "prefix": "stochRsi",
        "body": [
            "const stochRsi = gb.data.stochRsi;"
        ],
        "description": "Retrieve the latest value of the Stochastic RSI indicator"
    },
    "atr - Latest ATR value": {
        "prefix": "atr",
        "body": [
            "const atr = gb.data.atr;"
        ],
        "description": "Retrieve the latest value of the ATR (Average True Range) indicator"
    },
    "fib - High/low Fibonacci retracement levels": {
        "prefix": "fib",
        "body": [
            "const fib = gb.data.fib;"
        ],
        "description": "Retrieve the high and low Fibonacci retracement levels"
    },
    "vwma - Latest VWMA value": {
        "prefix": "vwma",
        "body": [
            "const vwma = gb.data.vwma;"
        ],
        "description": "Retrieve the latest value of the VWMA (Volume Weighted Moving Average)"
    },
    "diPlus - Latest DI+ value": {
        "prefix": "diPlus",
        "body": [
            "const diPlus = gb.data.diPlus;"
        ],
        "description": "Retrieve the latest value of the DI+ (Directional Indicator Plus) indicator"
    },
    "diMinus - Latest DI- value": {
        "prefix": "diMinus",
        "body": [
            "const diMinus = gb.data.diMinus;"
        ],
        "description": "Retrieve the latest value of the DI- (Directional Indicator Minus) indicator"
    },
    "adx - Latest ADX value": {
        "prefix": "adx",
        "body": [
            "const adx = gb.data.adx;"
        ],
        "description": "Retrieve the latest value of the ADX (Average Directional Index) indicator"
    },
    "candlesOpen - Array of open prices for OHLCV data": {
        "prefix": "candlesOpen",
        "body": [
            "const candlesOpen = gb.data.candlesOpen;"
        ],
        "description": "Retrieve an array of open prices for OHLCV data (sorted from oldest to newest)"
    },
    "candlesHigh - Array of high prices for OHLCV data": {
        "prefix": "candlesHigh",
        "body": [
            "const candlesHigh = gb.data.candlesHigh;"
        ],
        "description": "Retrieve an array of high prices for OHLCV data (sorted from oldest to newest)"
    },
    "candlesLow - Array of low prices for OHLCV data": {
        "prefix": "candlesLow",
        "body": [
            "const candlesLow = gb.data.candlesLow;"
        ],
        "description": "Retrieve an array of low prices for OHLCV data (sorted from oldest to newest)"
    },
    "candlesClose - Array of close prices for OHLCV data": {
        "prefix": "candlesClose",
        "body": [
            "const candlesClose = gb.data.candlesClose;"
        ],
        "description": "Retrieve an array of close prices for OHLCV data (sorted from oldest to newest)"
    },
    "candlesVolume - Array of volume values for OHLCV data": {
        "prefix": "candlesVolume",
        "body": [
            "const candlesVolume = gb.data.candlesVolume;"
        ],
        "description": "Retrieve an array of volume values for OHLCV data (sorted from oldest to newest)"
    },
    "candlesTimestamp - Array of timestamps for OHLCV data": {
        "prefix": "candlesTimestamp",
        "body": [
            "const candlesTimestamp = gb.data.candlesTimestamp;"
        ],
        "description": "Retrieve an array of timestamps for OHLCV data (sorted from oldest to newest)"
    },
    "candles - Combined object with OHLCV data": {
        "prefix": "candles",
        "body": [
            "const candles = gb.data.candles;"
        ],
        "description": "Retrieve the combined object containing OHLCV data (open, high, low, close, volume, and timestamp)"
    },
    "Set Custom Buy Target (Chart)": {
        "prefix": "chartCustomBuyTarget",
        "body": [
            "gb.data.pairLedger.customBuyTarget = ${1:price};"
        ],
        "description": "Set a custom buy target line on the chart"
    },
    "Set Custom Sell Target (Chart)": {
        "prefix": "chartCustomSellTarget",
        "body": [
            "gb.data.pairLedger.customSellTarget = ${1:price};"
        ],
        "description": "Set a custom sell target line on the chart"
    },
    "Set Custom Stop Target (Chart)": {
        "prefix": "chartCustomStopTarget",
        "body": [
            "gb.data.pairLedger.customStopTarget = ${1:price};"
        ],
        "description": "Set a custom stop target line on the chart"
    },
    "Set Custom Close Target (Chart)": {
        "prefix": "chartCustomCloseTarget",
        "body": [
            "gb.data.pairLedger.customCloseTarget = ${1:price};"
        ],
        "description": "Set a custom close target line on the chart"
    },
    "Set Custom Trailing Target (Chart)": {
        "prefix": "chartCustomTrailingTarget",
        "body": [
            "gb.data.pairLedger.customTrailingTarget = ${1:price};"
        ],
        "description": "Set a custom trailing target line on the chart"
    },
    "Set Custom DCA Target (Chart)": {
        "prefix": "chartCustomDcaTarget",
        "body": [
            "gb.data.pairLedger.customDcaTarget = ${1:price};"
        ],
        "description": "Set a custom DCA target line on the chart"
    },
    "Define Custom Chart Targets (Advanced)": {
        "prefix": "chartCustomTargetsAdvanced",
        "body": [
            "gb.data.pairLedger.customChartTargets = [",
            "  {",
            "    text: '${1:custom target line}',", 
            "    price: ${2:price},",
            "    quantity: '${3:999}',", 
            "    lineStyle: ${4:2},", 
            "    lineLength: ${5:5},", 
            "    lineWidth: ${6:1},", 
            "    extendLeft: ${7:false},",
            "    bodyBackgroundColor: '${8:#93cf53}',",
            "    bodyTextColor: '${9:rgba(0, 0, 0, 0.7)}',",
            "    bodyBorderColor: '${10:rgba(0, 0, 0, 0.0)}',",
            "    quantityBackgroundColor: '${11:#a6a6a6}',",
            "    quantityTextColor: '${12:rgba(0, 0, 0, 0.7)}',",
            "    quantityBorderColor: '${13:rgba(0, 0, 0, 0.0)}',",
            "    lineColor: '${14:#93cf53}',",
            "  }",
            "];"
        ],
        "description": "Define custom chart lines with more advanced properties"
    },
    "Initialize customStratStore in pairLedger": {
        "prefix": "customStratStore",
        "body": [
            "gb.data.pairLedger.customStratStore = gb.data.pairLedger.customStratStore || {};"
        ],
        "description": "Initialize customStratStore within pairLedger object if it doesn't already exist"
    },
    "Define Custom Multi-Point Chart Shape (Rectangle Example)": {
        "prefix": "chartCustomMultiPointShape",
        "body": [
            "// Sample data for multi-point shapes",
            "const ${1:shapeData} = [",
            "    { top: ${2:100}, bottom: ${3:80} },",
            "    { top: ${4:200}, bottom: ${5:150} },",
            "    // Add more data entries as needed",
            "];",
            "",
            "// Function to calculate the latest timestamp from candle data",
            "function getLastCandleTimestamp(candles) {",
            "    if (candles.length === 0) return 0;",
            "    return candles[candles.length - 1].timestamp;",
            "}",
            "",
            "// Code snippet to generate multi-point shapes for chart (e.g., rectangles)",
            "const ${6:customShapes} = ${1:shapeData}.map(data => {",
            "    return {",
            "        points: [",
            "            { price: data.top, time: 0 }, // Adjust time as needed",
            "            { price: data.bottom, time: getLastCandleTimestamp(gb.data.pairLedger.candles.open) },",
            "        ],",
            "        options: {",
            "            shape: '${7:rectangle}', // Specify the shape type",
            "            lock: true,",
            "            disableSelection: true,",
            "            setInBackground: true,",
            "            overrides: {",
            "                backgroundColor: data.bottom < gb.data.bid ? '${8:rgba(25,83,55,0.25)}' : '${9:rgba(89,46,46,0.25)}',",
            "                color: data.bottom < gb.data.bid ? '${10:#195337}' : '${11:#592e2e}',",
            "                textColor: data.bottom < gb.data.bid ? '${12:rgba(25,83,55,0.25)}' : '${13:rgba(89,46,46,0.25)}',",
            "                fillBackground: true,",
            "            }",
            "        }",
            "    };",
            "});",
            "",
            "// Save the shapes to pairLedger to be drawn on the chart",
            "gb.data.pairLedger.customChartShapes = ${6:customShapes};"
        ],
        "description": "Define custom multi-point shapes for chart (e.g., rectangles) with dynamic properties"
    },
    "Add Custom Stats to Sidebar": {
        "prefix": "customSidebarStats",
        "body": [
            "gb.data.pairLedger.sidebarExtras = [",
            "  {",
            "    label: '${1:Item 1}', // Label for the sidebar element",
            "    value: '${2:Your label}', // The value to display in the sidebar",
            "    tooltip: '${3:Tooltip text for this element}', // Optional tooltip for additional information",
            "    valueColor: '${4:#e7e7e7}', // Optional: Set the text color for the value",
            "  },",
            "  {",
            "    label: '${5:Item 2}', // Another sidebar element",
            "    value: '${6:Your label}', // Value to display",
            "    // Optional: Add tooltip and valueColor if needed",
            "  },",
            "  // Add more custom stats as needed",
            "];"
        ],
        "description": "Display custom stats in the sidebar next to the chart by adding elements to sidebarExtras in the pair ledger"
    },
    "Send Custom Notifications to Gunbot GUI": {
        "prefix": "customNotifications",
        "body": [
            "gb.data.pairLedger.notifications = [",
            "  {",
            "    text: '${1:custom success notification}',",
            "    variant: '${2:success}', // success = green notification",
            "    persist: ${3:true}, // true = notification stays until dismissed",
            "  },",
            "  {",
            "    text: '${4:custom error notification}',",
            "    variant: '${5:error}', // error = red notification",
            "    persist: ${6:false}, // false = auto-dismiss",
            "  },",
            "  {",
            "    text: '${7:custom info notification}',",
            "    variant: '${8:info}', // info = blue notification",
            "    persist: ${9:false}, // notification auto-dismisses",
            "  },",
            "  {",
            "    text: `${10:multi-line notification \\n\\nallows for more information spread over \\nmultiple lines of text}`,",
            "    variant: '${11:error}',",
            "    persist: ${12:true},",
            "  }",
            "];"
        ],
        "description": "Send custom notifications to the Gunbot GUI, including success, error, info, and multi-line messages"
    },
    "Modify Gunbot Config Programmatically": {
        "prefix": "modifyGunbotConfig",
        "body": [
            "// Require the Node.js 'fs' module to interact with the file system",
            "const fs = gb.method.require('fs');",
            "",
            "// Define the path of the config file to modify",
            "const configPath = './config.js';",
            "",
            "// Clone the current Gunbot config",
            "let configClone = { ...gb.data.config };",
            "",
            "// Example: Modify or override a specific parameter in the config",
            "// In this case, overriding a custom parameter for the 'USDT-BTC' pair on 'binance' exchange",
            "configClone.pairs.binance['USDT-BTC'].override.YOUR_CUSTOM_PARAMETER = ${1:6};",
            "",
            "// Format the updated config as a JSON string with indentation",
            "const formattedConfig = JSON.stringify(configClone, null, 4);",
            "",
            "// Write the changes to the config file using a synchronous write method",
            "// This ensures the changes are applied immediately upon execution",
            "fs.writeFileSync(configPath, formattedConfig, 'utf8');",
            "",
            "// Optionally, log the changes or handle errors if needed",
            "console.log('Config file updated successfully.');"
        ],
        "description": "Modify Gunbot config programmatically by cloning and writing changes to the config.js file"
    },
    "Hull Moving Average (Array)": {
        "prefix": "hmaArray",
        "body": [
            "// Define a variable to save the Hull Moving Average (HMA) to",
            "let hma;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate a 50-period Hull Moving Average",
            "gb.method.tulind.indicators.hma.indicator([gb.data.candlesClose], [50], function (err, results) {",
            "    // Tulind returns an array with HMA values",
            "    // Assign the most recent value to the hma variable",
            "    hma = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Hull Moving Average (HMA) using candlesClose"
    },
    "Simple Moving Average (Array)": {
        "prefix": "smaArray",
        "body": [
            "// Define a variable to save the Simple Moving Average (SMA) to",
            "let sma;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate a 20-period Simple Moving Average",
            "gb.method.tulind.indicators.sma.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    // Tulind returns an array with SMA values",
            "    // Assign the most recent value to the sma variable",
            "    sma = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Simple Moving Average (SMA) using candlesClose"
    },
    "Exponential Moving Average (Array)": {
        "prefix": "emaArray",
        "body": [
            "// Define a variable to save the Exponential Moving Average (EMA) to",
            "let ema;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate a 20-period Exponential Moving Average",
            "gb.method.tulind.indicators.ema.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    // Tulind returns an array with EMA values",
            "    // Assign the most recent value to the ema variable",
            "    ema = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Exponential Moving Average (EMA) using candlesClose"
    },
    "Relative Strength Index (Array)": {
        "prefix": "rsiArray",
        "body": [
            "// Define a variable to save the Relative Strength Index (RSI) to",
            "let rsi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate a 14-period RSI",
            "gb.method.tulind.indicators.rsi.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    // Tulind returns an array with RSI values",
            "    // Assign the most recent value to the rsi variable",
            "    rsi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Relative Strength Index (RSI) using candlesClose"
    },
    "MACD (Array)": {
        "prefix": "macdArray",
        "body": [
            "// Define variables to save the MACD, signal line, and histogram",
            "let macd, macdSignal, macdHistogram;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate MACD with 12, 26, 9 periods",
            "gb.method.tulind.indicators.macd.indicator([gb.data.candlesClose], [12, 26, 9], function (err, results) {",
            "    // Tulind returns an array with MACD values, signal line, and histogram",
            "    macd = results[0][results[0].length - 1];",
            "    macdSignal = results[1][results[1].length - 1];",
            "    macdHistogram = results[2][results[2].length - 1];",
            "});"
        ],
        "description": "Calculate the MACD, signal line, and histogram using candlesClose"
    },
    "Bollinger Bands (Array)": {
        "prefix": "bbandsArray",
        "body": [
            "// Define variables to save the Bollinger Bands (upper, middle, lower)",
            "let upperBand, middleBand, lowerBand;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose data as input, calculate BBands with 20-period and 2 standard deviations",
            "gb.method.tulind.indicators.bbands.indicator([gb.data.candlesClose], [20, 2], function (err, results) {",
            "    // Tulind returns arrays for upper, middle, and lower Bollinger Bands",
            "    upperBand = results[0][results[0].length - 1];",
            "    middleBand = results[1][results[1].length - 1];",
            "    lowerBand = results[2][results[2].length - 1];",
            "});"
        ],
        "description": "Calculate the Bollinger Bands (upper, middle, lower) using candlesClose"
    },
    "Absolute Value (Array)": {
        "prefix": "absArray",
        "body": [
            "// Define a variable to save the Absolute Value (ABS) to",
            "let abs;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Absolute Value",
            "gb.method.tulind.indicators.abs.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    abs = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Absolute Value (ABS) using candlesClose"
    },
    "Arccosine (Array)": {
        "prefix": "acosArray",
        "body": [
            "// Define a variable to save the Arccosine (ACOS) to",
            "let acos;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Arccosine",
            "gb.method.tulind.indicators.acos.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    acos = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Arccosine (ACOS) using candlesClose"
    },
    "Accumulation/Distribution Line (Array)": {
        "prefix": "adArray",
        "body": [
            "// Define a variable to save the Accumulation/Distribution Line (AD) to",
            "let ad;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose, candlesVolume as input to calculate AD",
            "gb.method.tulind.indicators.ad.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose, gb.data.candlesVolume], [], function (err, results) {",
            "    ad = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Accumulation/Distribution Line (AD) using candlesHigh, candlesLow, candlesClose, candlesVolume"
    },
    "Addition (Array)": {
        "prefix": "addArray",
        "body": [
            "// Define a variable to save the Addition (ADD) to",
            "let add;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate Addition",
            "gb.method.tulind.indicators.add.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    add = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Addition (ADD) using candlesClose and candlesOpen"
    },
    "Accumulation/Distribution Oscillator (Array)": {
        "prefix": "adoscArray",
        "body": [
            "// Define a variable to save the Accumulation/Distribution Oscillator (ADOSC) to",
            "let adosc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose, candlesVolume as input to calculate ADOSC",
            "gb.method.tulind.indicators.adosc.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose, gb.data.candlesVolume], [3, 10], function (err, results) {",
            "    adosc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Accumulation/Distribution Oscillator (ADOSC) using candlesHigh, candlesLow, candlesClose, candlesVolume"
    },
    "Average Directional Movement Index (Array)": {
        "prefix": "adxArray",
        "body": [
            "// Define a variable to save the Average Directional Movement Index (ADX) to",
            "let adx;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate ADX",
            "gb.method.tulind.indicators.adx.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    adx = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Average Directional Movement Index (ADX) using candlesHigh, candlesLow, candlesClose"
    },
    "Average Directional Movement Rating (Array)": {
        "prefix": "adxrArray",
        "body": [
            "// Define a variable to save the Average Directional Movement Rating (ADXR) to",
            "let adxr;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate ADXR",
            "gb.method.tulind.indicators.adxr.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    adxr = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Average Directional Movement Rating (ADXR) using candlesHigh, candlesLow, candlesClose"
    },
    "Awesome Oscillator (Array)": {
        "prefix": "aoArray",
        "body": [
            "// Define a variable to save the Awesome Oscillator (AO) to",
            "let ao;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow as input to calculate AO",
            "gb.method.tulind.indicators.ao.indicator([gb.data.candlesHigh, gb.data.candlesLow], [], function (err, results) {",
            "    ao = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Awesome Oscillator (AO) using candlesHigh, candlesLow"
    },
    "Absolute Price Oscillator (Array)": {
        "prefix": "apoArray",
        "body": [
            "// Define a variable to save the Absolute Price Oscillator (APO) to",
            "let apo;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate APO with 12 and 26 periods",
            "gb.method.tulind.indicators.apo.indicator([gb.data.candlesClose], [12, 26], function (err, results) {",
            "    apo = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Absolute Price Oscillator (APO) using candlesClose"
    },
    "Aroon (Array)": {
        "prefix": "aroonArray",
        "body": [
            "// Define variables to save the Aroon Up and Down to",
            "let aroonUp, aroonDown;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Aroon with 14 periods",
            "gb.method.tulind.indicators.aroon.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    aroonUp = results[0][results[0].length - 1];",
            "    aroonDown = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Aroon Up and Down using candlesClose"
    },
    "Aroon Oscillator (Array)": {
        "prefix": "aroonoscArray",
        "body": [
            "// Define a variable to save the Aroon Oscillator (AROONOSC) to",
            "let aroonosc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Aroon Oscillator with 14 periods",
            "gb.method.tulind.indicators.aroonosc.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    aroonosc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Aroon Oscillator (AROONOSC) using candlesClose"
    },
    "Arcsine (Array)": {
        "prefix": "asinArray",
        "body": [
            "// Define a variable to save the Arcsine (ASIN) to",
            "let asin;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Arcsine",
            "gb.method.tulind.indicators.asin.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    asin = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Arcsine (ASIN) using candlesClose"
    },
    "Arctangent (Array)": {
        "prefix": "atanArray",
        "body": [
            "// Define a variable to save the Arctangent (ATAN) to",
            "let atan;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Arctangent",
            "gb.method.tulind.indicators.atan.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    atan = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Arctangent (ATAN) using candlesClose"
    },
    "Average True Range (Array)": {
        "prefix": "atrArray",
        "body": [
            "// Define a variable to save the Average True Range (ATR) to",
            "let atr;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate ATR with 14 periods",
            "gb.method.tulind.indicators.atr.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    atr = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Average True Range (ATR) using candlesHigh, candlesLow, candlesClose"
    },
    "Average Price (Array)": {
        "prefix": "avgpriceArray",
        "body": [
            "// Define a variable to save the Average Price (AVGPRICE) to",
            "let avgprice;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesOpen, candlesHigh, candlesLow, candlesClose as input to calculate AVGPRICE",
            "gb.method.tulind.indicators.avgprice.indicator([gb.data.candlesOpen, gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [], function (err, results) {",
            "    avgprice = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Average Price (AVGPRICE) using candlesOpen, candlesHigh, candlesLow, candlesClose"
    },
    "Balance of Power (Array)": {
        "prefix": "bopArray",
        "body": [
            "// Define a variable to save the Balance of Power (BOP) to",
            "let bop;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesOpen, candlesHigh, candlesLow, candlesClose as input to calculate BOP",
            "gb.method.tulind.indicators.bop.indicator([gb.data.candlesOpen, gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [], function (err, results) {",
            "    bop = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Balance of Power (BOP) using candlesOpen, candlesHigh, candlesLow, candlesClose"
    },
    "Commodity Channel Index (Array)": {
        "prefix": "cciArray",
        "body": [
            "// Define a variable to save the Commodity Channel Index (CCI) to",
            "let cci;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate CCI with 20 periods",
            "gb.method.tulind.indicators.cci.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [20], function (err, results) {",
            "    cci = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Commodity Channel Index (CCI) using candlesHigh, candlesLow, candlesClose"
    },
    "Chande Momentum Oscillator (Array)": {
        "prefix": "cmoArray",
        "body": [
            "// Define a variable to save the Chande Momentum Oscillator (CMO) to",
            "let cmo;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate CMO with 14 periods",
            "gb.method.tulind.indicators.cmo.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    cmo = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Chande Momentum Oscillator (CMO) using candlesClose"
    },
    "Ceiling (Array)": {
        "prefix": "ceilArray",
        "body": [
            "// Define a variable to save the Ceiling (CEIL) to",
            "let ceil;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate CEIL",
            "gb.method.tulind.indicators.ceil.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    ceil = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Ceiling (CEIL) using candlesClose"
    },
    "Cosine (Array)": {
        "prefix": "cosArray",
        "body": [
            "// Define a variable to save the Cosine (COS) to",
            "let cos;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate COS",
            "gb.method.tulind.indicators.cos.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    cos = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Cosine (COS) using candlesClose"
    },
    "Hyperbolic Cosine (Array)": {
        "prefix": "coshArray",
        "body": [
            "// Define a variable to save the Hyperbolic Cosine (COSH) to",
            "let cosh;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate COSH",
            "gb.method.tulind.indicators.cosh.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    cosh = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Hyperbolic Cosine (COSH) using candlesClose"
    },
    "Crossany (Array)": {
        "prefix": "crossanyArray",
        "body": [
            "// Define a variable to save the Crossany result to",
            "let crossany;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate Crossany",
            "gb.method.tulind.indicators.crossany.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    crossany = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Crossany using candlesClose and candlesOpen"
    },
    "Crossover (Array)": {
        "prefix": "crossoverArray",
        "body": [
            "// Define a variable to save the Crossover result to",
            "let crossover;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate Crossover",
            "gb.method.tulind.indicators.crossover.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    crossover = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Crossover using candlesClose and candlesOpen"
    },
    "Chaikin Volatility (Array)": {
        "prefix": "cviArray",
        "body": [
            "// Define a variable to save the Chaikin Volatility (CVI) to",
            "let cvi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh and candlesLow as input to calculate CVI",
            "gb.method.tulind.indicators.cvi.indicator([gb.data.candlesHigh, gb.data.candlesLow], [10], function (err, results) {",
            "    cvi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Chaikin Volatility (CVI) using candlesHigh and candlesLow"
    },
    "Linear Decay (Array)": {
        "prefix": "decayArray",
        "body": [
            "// Define a variable to save the Linear Decay to",
            "let decay;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Linear Decay with a period of 5",
            "gb.method.tulind.indicators.decay.indicator([gb.data.candlesClose], [5], function (err, results) {",
            "    decay = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Linear Decay using candlesClose"
    },
    "Double Exponential Moving Average (Array)": {
        "prefix": "demaArray",
        "body": [
            "// Define a variable to save the Double Exponential Moving Average (DEMA) to",
            "let dema;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate DEMA with a period of 20",
            "gb.method.tulind.indicators.dema.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    dema = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Double Exponential Moving Average (DEMA) using candlesClose"
    },
    "Directional Indicator (Array)": {
        "prefix": "diArray",
        "body": [
            "// Define variables to save the Directional Indicator (+DI and -DI) to",
            "let diPlus, diMinus;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate +DI and -DI",
            "gb.method.tulind.indicators.di.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    diPlus = results[0][results[0].length - 1];",
            "    diMinus = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Directional Indicator (+DI and -DI) using candlesHigh, candlesLow, candlesClose"
    },
    "Division (Array)": {
        "prefix": "divArray",
        "body": [
            "// Define a variable to save the Vector Division (DIV) result to",
            "let div;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate Division",
            "gb.method.tulind.indicators.div.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    div = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Vector Division (DIV) using candlesClose and candlesOpen"
    },
    "Directional Movement (Array)": {
        "prefix": "dmArray",
        "body": [
            "// Define variables to save the Directional Movement (+DM and -DM) to",
            "let dmPlus, dmMinus;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh and candlesLow as input to calculate +DM and -DM",
            "gb.method.tulind.indicators.dm.indicator([gb.data.candlesHigh, gb.data.candlesLow], [14], function (err, results) {",
            "    dmPlus = results[0][results[0].length - 1];",
            "    dmMinus = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Directional Movement (+DM and -DM) using candlesHigh and candlesLow"
    },
    "Detrended Price Oscillator (Array)": {
        "prefix": "dpoArray",
        "body": [
            "// Define a variable to save the Detrended Price Oscillator (DPO) to",
            "let dpo;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate DPO with a period of 20",
            "gb.method.tulind.indicators.dpo.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    dpo = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Detrended Price Oscillator (DPO) using candlesClose"
    },
    "Directional Movement Index (Array)": {
        "prefix": "dxArray",
        "body": [
            "// Define a variable to save the Directional Movement Index (DX) to",
            "let dx;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate DX with a period of 14",
            "gb.method.tulind.indicators.dx.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    dx = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Directional Movement Index (DX) using candlesHigh, candlesLow, candlesClose"
    },
    "Exponential Decay (Array)": {
        "prefix": "edecayArray",
        "body": [
            "// Define a variable to save the Exponential Decay to",
            "let edecay;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Exponential Decay with a period of 5",
            "gb.method.tulind.indicators.edecay.indicator([gb.data.candlesClose], [5], function (err, results) {",
            "    edecay = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Exponential Decay using candlesClose"
    },
    "Ease of Movement (Array)": {
        "prefix": "emvArray",
        "body": [
            "// Define a variable to save the Ease of Movement (EMV) to",
            "let emv;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesVolume as input to calculate EMV",
            "gb.method.tulind.indicators.emv.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesVolume], [], function (err, results) {",
            "    emv = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate Ease of Movement (EMV) using candlesHigh, candlesLow, candlesVolume"
    },
    "Exponential (Array)": {
        "prefix": "expArray",
        "body": [
            "// Define a variable to save the Exponential result to",
            "let exp;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate EXP",
            "gb.method.tulind.indicators.exp.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    exp = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Exponential result using candlesClose"
    },
    "Fisher Transform (Array)": {
        "prefix": "fisherArray",
        "body": [
            "// Define variables to save the Fisher Transform and signal line to",
            "let fisher, fisherSignal;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh and candlesLow as input to calculate Fisher Transform with 10 periods",
            "gb.method.tulind.indicators.fisher.indicator([gb.data.candlesHigh, gb.data.candlesLow], [10], function (err, results) {",
            "    fisher = results[0][results[0].length - 1];",
            "    fisherSignal = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Fisher Transform and signal line using candlesHigh, candlesLow"
    },
    "Floor (Array)": {
        "prefix": "floorArray",
        "body": [
            "// Define a variable to save the Floor result to",
            "let floor;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate FLOOR",
            "gb.method.tulind.indicators.floor.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    floor = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Floor result using candlesClose"
    },
    "Forecast Oscillator (Array)": {
        "prefix": "foscArray",
        "body": [
            "// Define a variable to save the Forecast Oscillator (FOSC) to",
            "let fosc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate FOSC with a period of 10",
            "gb.method.tulind.indicators.fosc.indicator([gb.data.candlesClose], [10], function (err, results) {",
            "    fosc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Forecast Oscillator (FOSC) using candlesClose"
    },
    "Kaufman Adaptive Moving Average (Array)": {
        "prefix": "kamaArray",
        "body": [
            "// Define a variable to save the Kaufman Adaptive Moving Average (KAMA) to",
            "let kama;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate KAMA with a period of 20",
            "gb.method.tulind.indicators.kama.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    kama = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Kaufman Adaptive Moving Average (KAMA) using candlesClose"
    },
    "Klinger Volume Oscillator (Array)": {
        "prefix": "kvoArray",
        "body": [
            "// Define a variable to save the Klinger Volume Oscillator (KVO) to",
            "let kvo;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose, candlesVolume as input to calculate KVO with 34, 55 periods",
            "gb.method.tulind.indicators.kvo.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose, gb.data.candlesVolume], [34, 55], function (err, results) {",
            "    kvo = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Klinger Volume Oscillator (KVO) using candlesHigh, candlesLow, candlesClose, candlesVolume"
    },
    "Lag (Array)": {
        "prefix": "lagArray",
        "body": [
            "// Define a variable to save the Lag result to",
            "let lag;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Lag with a period of 5",
            "gb.method.tulind.indicators.lag.indicator([gb.data.candlesClose], [5], function (err, results) {",
            "    lag = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Lag result using candlesClose"
    },
    "Linear Regression (Array)": {
        "prefix": "linregArray",
        "body": [
            "// Define a variable to save the Linear Regression (LINREG) to",
            "let linreg;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate LINREG with a period of 14",
            "gb.method.tulind.indicators.linreg.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    linreg = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Linear Regression (LINREG) using candlesClose"
    },
    "Linear Regression Intercept (Array)": {
        "prefix": "linregInterceptArray",
        "body": [
            "// Define a variable to save the Linear Regression Intercept to",
            "let linregIntercept;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Linear Regression Intercept with a period of 14",
            "gb.method.tulind.indicators.linregintercept.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    linregIntercept = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Linear Regression Intercept using candlesClose"
    },
    "Linear Regression Slope (Array)": {
        "prefix": "linregSlopeArray",
        "body": [
            "// Define a variable to save the Linear Regression Slope to",
            "let linregSlope;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Linear Regression Slope with a period of 14",
            "gb.method.tulind.indicators.linregslope.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    linregSlope = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Linear Regression Slope using candlesClose"
    },
    "Natural Log (Array)": {
        "prefix": "lnArray",
        "body": [
            "// Define a variable to save the Natural Log (LN) to",
            "let ln;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate LN",
            "gb.method.tulind.indicators.ln.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    ln = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Natural Log (LN) using candlesClose"
    },
    "Log Base 10 (Array)": {
        "prefix": "log10Array",
        "body": [
            "// Define a variable to save the Log Base 10 (LOG10) to",
            "let log10;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate LOG10",
            "gb.method.tulind.indicators.log10.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    log10 = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Log Base 10 (LOG10) using candlesClose"
    },
    "Market Facilitation Index (Array)": {
        "prefix": "marketfiArray",
        "body": [
            "// Define a variable to save the Market Facilitation Index (MARKETFI) to",
            "let marketfi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesVolume as input to calculate MARKETFI",
            "gb.method.tulind.indicators.marketfi.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesVolume], [], function (err, results) {",
            "    marketfi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Market Facilitation Index (MARKETFI) using candlesHigh, candlesLow, candlesVolume"
    },
    "Mass Index (Array)": {
        "prefix": "massArray",
        "body": [
            "// Define a variable to save the Mass Index (MASS) to",
            "let mass;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh and candlesLow as input to calculate MASS with a period of 9",
            "gb.method.tulind.indicators.mass.indicator([gb.data.candlesHigh, gb.data.candlesLow], [9], function (err, results) {",
            "    mass = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Mass Index (MASS) using candlesHigh and candlesLow"
    },
    "Maximum In Period (Array)": {
        "prefix": "maxArray",
        "body": [
            "// Define a variable to save the Maximum In Period (MAX) to",
            "let max;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate MAX with a period of 20",
            "gb.method.tulind.indicators.max.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    max = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Maximum In Period (MAX) using candlesClose"
    },
    "Mean Deviation Over Period (Array)": {
        "prefix": "mdArray",
        "body": [
            "// Define a variable to save the Mean Deviation Over Period (MD) to",
            "let md;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate MD with a period of 14",
            "gb.method.tulind.indicators.md.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    md = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Mean Deviation Over Period (MD) using candlesClose"
    },
    "Median Price (Array)": {
        "prefix": "medpriceArray",
        "body": [
            "// Define a variable to save the Median Price (MEDPRICE) to",
            "let medprice;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh and candlesLow as input to calculate MEDPRICE",
            "gb.method.tulind.indicators.medprice.indicator([gb.data.candlesHigh, gb.data.candlesLow], [], function (err, results) {",
            "    medprice = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Median Price (MEDPRICE) using candlesHigh and candlesLow"
    },
    "Money Flow Index (Array)": {
        "prefix": "mfiArray",
        "body": [
            "// Define a variable to save the Money Flow Index (MFI) to",
            "let mfi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose, candlesVolume as input to calculate MFI with a period of 14",
            "gb.method.tulind.indicators.mfi.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose, gb.data.candlesVolume], [14], function (err, results) {",
            "    mfi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Money Flow Index (MFI) using candlesHigh, candlesLow, candlesClose, candlesVolume"
    },
    "Minimum In Period (Array)": {
        "prefix": "minArray",
        "body": [
            "// Define a variable to save the Minimum In Period (MIN) to",
            "let min;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate MIN with a period of 20",
            "gb.method.tulind.indicators.min.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    min = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Minimum In Period (MIN) using candlesClose"
    },
    "Momentum (Array)": {
        "prefix": "momArray",
        "body": [
            "// Define a variable to save the Momentum (MOM) to",
            "let mom;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate MOM with a period of 10",
            "gb.method.tulind.indicators.mom.indicator([gb.data.candlesClose], [10], function (err, results) {",
            "    mom = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Momentum (MOM) using candlesClose"
    },
    "Mesa Sine Wave (Array)": {
        "prefix": "mswArray",
        "body": [
            "// Define variables to save the Mesa Sine Wave (MSW) and signal to",
            "let msw, mswSignal;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate MSW with a period of 14",
            "gb.method.tulind.indicators.msw.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    msw = results[0][results[0].length - 1];",
            "    mswSignal = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Mesa Sine Wave (MSW) using candlesClose"
    },
    "Multiplication (Array)": {
        "prefix": "mulArray",
        "body": [
            "// Define a variable to save the Multiplication (MUL) to",
            "let mul;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate MUL",
            "gb.method.tulind.indicators.mul.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    mul = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Multiplication (MUL) using candlesClose and candlesOpen"
    },
    "Normalized Average True Range (Array)": {
        "prefix": "natrArray",
        "body": [
            "// Define a variable to save the Normalized Average True Range (NATR) to",
            "let natr;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate NATR with a period of 14",
            "gb.method.tulind.indicators.natr.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    natr = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Normalized Average True Range (NATR) using candlesHigh, candlesLow, candlesClose"
    },
    "Negative Volume Index (Array)": {
        "prefix": "nviArray",
        "body": [
            "// Define a variable to save the Negative Volume Index (NVI) to",
            "let nvi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesVolume as input to calculate NVI",
            "gb.method.tulind.indicators.nvi.indicator([gb.data.candlesClose, gb.data.candlesVolume], [], function (err, results) {",
            "    nvi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Negative Volume Index (NVI) using candlesClose and candlesVolume"
    },
    "On Balance Volume (Array)": {
        "prefix": "obvArray",
        "body": [
            "// Define a variable to save the On Balance Volume (OBV) to",
            "let obv;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesVolume as input to calculate OBV",
            "gb.method.tulind.indicators.obv.indicator([gb.data.candlesClose, gb.data.candlesVolume], [], function (err, results) {",
            "    obv = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the On Balance Volume (OBV) using candlesClose and candlesVolume"
    },
    "Percentage Price Oscillator (Array)": {
        "prefix": "ppoArray",
        "body": [
            "// Define a variable to save the Percentage Price Oscillator (PPO) to",
            "let ppo;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate PPO with 12, 26 periods",
            "gb.method.tulind.indicators.ppo.indicator([gb.data.candlesClose], [12, 26], function (err, results) {",
            "    ppo = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Percentage Price Oscillator (PPO) using candlesClose"
    },
    "Parabolic SAR (Array)": {
        "prefix": "psarArray",
        "body": [
            "// Define a variable to save the Parabolic SAR (PSAR) to",
            "let psar;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow as input to calculate PSAR with acceleration 0.02, maximum 0.2",
            "gb.method.tulind.indicators.psar.indicator([gb.data.candlesHigh, gb.data.candlesLow], [0.02, 0.2], function (err, results) {",
            "    psar = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Parabolic SAR (PSAR) using candlesHigh, candlesLow"
    },
    "Positive Volume Index (Array)": {
        "prefix": "pviArray",
        "body": [
            "// Define a variable to save the Positive Volume Index (PVI) to",
            "let pvi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesVolume as input to calculate PVI",
            "gb.method.tulind.indicators.pvi.indicator([gb.data.candlesClose, gb.data.candlesVolume], [], function (err, results) {",
            "    pvi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Positive Volume Index (PVI) using candlesClose and candlesVolume"
    },
    "Qstick (Array)": {
        "prefix": "qstickArray",
        "body": [
            "// Define a variable to save the Qstick to",
            "let qstick;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesOpen and candlesClose as input to calculate Qstick with 8 periods",
            "gb.method.tulind.indicators.qstick.indicator([gb.data.candlesOpen, gb.data.candlesClose], [8], function (err, results) {",
            "    qstick = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Qstick using candlesOpen, candlesClose"
    },
    "Rate of Change (Array)": {
        "prefix": "rocArray",
        "body": [
            "// Define a variable to save the Rate of Change (ROC) to",
            "let roc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate ROC with 10 periods",
            "gb.method.tulind.indicators.roc.indicator([gb.data.candlesClose], [10], function (err, results) {",
            "    roc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Rate of Change (ROC) using candlesClose"
    },
    "Rate of Change Ratio (Array)": {
        "prefix": "rocrArray",
        "body": [
            "// Define a variable to save the Rate of Change Ratio (ROCR) to",
            "let rocr;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate ROCR with 10 periods",
            "gb.method.tulind.indicators.rocr.indicator([gb.data.candlesClose], [10], function (err, results) {",
            "    rocr = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Rate of Change Ratio (ROCR) using candlesClose"
    },
    "Sine (Array)": {
        "prefix": "sinArray",
        "body": [
            "// Define a variable to save the Sine (SIN) to",
            "let sin;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate SIN",
            "gb.method.tulind.indicators.sin.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    sin = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Sine (SIN) using candlesClose"
    },
    "Hyperbolic Sine (Array)": {
        "prefix": "sinhArray",
        "body": [
            "// Define a variable to save the Hyperbolic Sine (SINH) to",
            "let sinh;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate SINH",
            "gb.method.tulind.indicators.sinh.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    sinh = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Hyperbolic Sine (SINH) using candlesClose"
    },
    "Stochastic Oscillator (Array)": {
        "prefix": "stochArray",
        "body": [
            "// Define variables to save the Stochastic Oscillator %K and %D to",
            "let stochK, stochD;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate Stochastic Oscillator with 14, 3, 3 periods",
            "gb.method.tulind.indicators.stoch.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14, 3, 3], function (err, results) {",
            "    stochK = results[0][results[0].length - 1];",
            "    stochD = results[1][results[1].length - 1];",
            "});"
        ],
        "description": "Calculate the Stochastic Oscillator using candlesHigh, candlesLow, candlesClose"
    },
    "Stochastic RSI (Array)": {
        "prefix": "stochrsiArray",
        "body": [
            "// Define a variable to save the Stochastic RSI (STOCHRSI) to",
            "let stochrsi;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate Stochastic RSI with a period of 14",
            "gb.method.tulind.indicators.stochrsi.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    stochrsi = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Stochastic RSI (STOCHRSI) using candlesClose"
    },
    "Subtraction (Array)": {
        "prefix": "subArray",
        "body": [
            "// Define a variable to save the Subtraction (SUB) to",
            "let sub;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose and candlesOpen as input to calculate SUB",
            "gb.method.tulind.indicators.sub.indicator([gb.data.candlesClose, gb.data.candlesOpen], [], function (err, results) {",
            "    sub = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Subtraction (SUB) using candlesClose and candlesOpen"
    },
    "Sum Over Period (Array)": {
        "prefix": "sumArray",
        "body": [
            "// Define a variable to save the Sum Over Period (SUM) to",
            "let sum;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate SUM over a period of 10",
            "gb.method.tulind.indicators.sum.indicator([gb.data.candlesClose], [10], function (err, results) {",
            "    sum = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Sum Over Period (SUM) using candlesClose"
    },
    "Tangent (Array)": {
        "prefix": "tanArray",
        "body": [
            "// Define a variable to save the Tangent (TAN) to",
            "let tan;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate TAN",
            "gb.method.tulind.indicators.tan.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    tan = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Tangent (TAN) using candlesClose"
    },
    "Hyperbolic Tangent (Array)": {
        "prefix": "tanhArray",
        "body": [
            "// Define a variable to save the Hyperbolic Tangent (TANH) to",
            "let tanh;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate TANH",
            "gb.method.tulind.indicators.tanh.indicator([gb.data.candlesClose], [], function (err, results) {",
            "    tanh = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Hyperbolic Tangent (TANH) using candlesClose"
    },
    "Triple Exponential Moving Average (Array)": {
        "prefix": "temaArray",
        "body": [
            "// Define a variable to save the Triple Exponential Moving Average (TEMA) to",
            "let tema;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate TEMA with a period of 30",
            "gb.method.tulind.indicators.tema.indicator([gb.data.candlesClose], [30], function (err, results) {",
            "    tema = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Triple Exponential Moving Average (TEMA) using candlesClose"
    },
    "Time Series Forecast (Array)": {
        "prefix": "tsfArray",
        "body": [
            "// Define a variable to save the Time Series Forecast (TSF) to",
            "let tsf;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate TSF with a period of 14",
            "gb.method.tulind.indicators.tsf.indicator([gb.data.candlesClose], [14], function (err, results) {",
            "    tsf = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Time Series Forecast (TSF) using candlesClose"
    },
    "Typical Price (Array)": {
        "prefix": "typpriceArray",
        "body": [
            "// Define a variable to save the Typical Price (TYPPRICE) to",
            "let typprice;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate TYPPRICE",
            "gb.method.tulind.indicators.typprice.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [], function (err, results) {",
            "    typprice = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Typical Price (TYPPRICE) using candlesHigh, candlesLow, candlesClose"
    },
    "Ultimate Oscillator (Array)": {
        "prefix": "ultoscArray",
        "body": [
            "// Define a variable to save the Ultimate Oscillator (ULTOSC) to",
            "let ultosc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate ULTOSC with periods 7, 14, 28",
            "gb.method.tulind.indicators.ultosc.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [7, 14, 28], function (err, results) {",
            "    ultosc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Ultimate Oscillator (ULTOSC) using candlesHigh, candlesLow, candlesClose"
    },
    "Variance Over Period (Array)": {
        "prefix": "varArray",
        "body": [
            "// Define a variable to save the Variance Over Period (VAR) to",
            "let variance;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate VAR over a period of 20",
            "gb.method.tulind.indicators.var.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    variance = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Variance Over Period (VAR) using candlesClose"
    },
    "Vertical Horizontal Filter (Array)": {
        "prefix": "vhfArray",
        "body": [
            "// Define a variable to save the Vertical Horizontal Filter (VHF) to",
            "let vhf;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate VHF with a period of 28",
            "gb.method.tulind.indicators.vhf.indicator([gb.data.candlesClose], [28], function (err, results) {",
            "    vhf = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Vertical Horizontal Filter (VHF) using candlesClose"
    },
    "Volume Oscillator (Array)": {
        "prefix": "voscArray",
        "body": [
            "// Define a variable to save the Volume Oscillator (VOSC) to",
            "let vosc;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesVolume as input to calculate VOSC with short and long periods of 12 and 26",
            "gb.method.tulind.indicators.vosc.indicator([gb.data.candlesVolume], [12, 26], function (err, results) {",
            "    vosc = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Volume Oscillator (VOSC) using candlesVolume"
    },
    "Williams %R (Array)": {
        "prefix": "willrArray",
        "body": [
            "// Define a variable to save the Williams %R (WILLR) to",
            "let willr;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesHigh, candlesLow, candlesClose as input to calculate WILLR with a period of 14",
            "gb.method.tulind.indicators.willr.indicator([gb.data.candlesHigh, gb.data.candlesLow, gb.data.candlesClose], [14], function (err, results) {",
            "    willr = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Williams %R (WILLR) using candlesHigh, candlesLow, candlesClose"
    },
    "Zero-Lag Exponential Moving Average (Array)": {
        "prefix": "zlemaArray",
        "body": [
            "// Define a variable to save the Zero-Lag Exponential Moving Average (ZLEMA) to",
            "let zlema;",
            "",
            "// Get indicator data from Tulind",
            "// Use candlesClose as input to calculate ZLEMA with a period of 20",
            "gb.method.tulind.indicators.zlema.indicator([gb.data.candlesClose], [20], function (err, results) {",
            "    zlema = results[0][results[0].length - 1];",
            "});"
        ],
        "description": "Calculate the Zero-Lag Exponential Moving Average (ZLEMA) using candlesClose"
    }
}